name: HTNodes

on:
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours
  workflow_dispatch:

jobs:
  HTNodes:
    runs-on: ubuntu-latest
    timeout-minutes: 360  # 6 hours max

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set hostname to test
        run: sudo hostnamectl set-hostname test

      - name: Download VPS backup (if any)
        uses: actions/download-artifact@v4
        with:
          name: vps-backup
          path: ./backup
        continue-on-error: true

      - name: Install prerequisites
        run: |
          sudo apt update
          sudo apt install -y curl unzip sudo net-tools neofetch pv pigz

      - name: Install Tailscale
        run: |
          curl -fsSL https://tailscale.com/install.sh | sh

      - name: Restore backup files
        run: |
          if [ -f ./backup/backup.tar.gz ]; then
            echo "✅ Restoring backup files..."
            sudo mkdir -p /opt/vps-backup
            tar -xzf ./backup/backup.tar.gz -C /
          else
            echo "⚠ No backup found, starting fresh"
          fi

      - name: Restore Tailscale state
        run: |
          if [ -f /opt/vps-backup/data/tailscaled.state ]; then
            echo "✅ Restoring Tailscale state..."
            sudo mkdir -p /var/lib/tailscale
            sudo cp /opt/vps-backup/data/tailscaled.state /var/lib/tailscale/tailscaled.state
            sudo chmod 600 /var/lib/tailscale/tailscaled.state
          else
            echo "⚠ No Tailscale state to restore"
          fi

      - name: Start Tailscale
        run: |
          sudo tailscaled &
          sleep 8
          sudo tailscale up --authkey ${{ secrets.TAILSCALE_AUTHKEY }} --hostname=HTNodes || echo "Tailscale already up"

      - name: Create user test with sudo
        run: |
          if ! id -u test >/dev/null 2>&1; then
            sudo useradd -m -s /bin/bash test
            echo "test:test" | sudo chpasswd
            sudo usermod -aG sudo test
            echo "test ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/test
          fi

      - name: Start SSHX session and keep alive
        run: |
          set -x
          echo "💻 Connect via SSHX or Tailscale:"
          TS_IP=$(tailscale ip -4 2>/dev/null | head -n 1)
          if [ -n "$TS_IP" ]; then
            echo "🔑 Tailscale IP: $TS_IP"
            echo "👉 ssh HTNodes@$TS_IP"
            echo "Password: HTNodes"
          else
            echo "⚠ No Tailscale IP found."
          fi

          echo "✅ Starting SSHX..."
          curl -sSf https://sshx.io/get | sh -s run &
          SSHX_PID=$!

          echo "✅ SSHX started. Keeping alive for 5h 40m..."
          SECONDS_LEFT=$((320 * 60))
          while [ $SECONDS_LEFT -gt 0 ]; do
            if ps -p $SSHX_PID > /dev/null; then
              echo "SSHX alive | Time left: $((SECONDS_LEFT / 60)) mins"
            else
              echo "⚠ SSHX exited early. Still waiting for backup..."
            fi
            sleep 60
            SECONDS_LEFT=$((SECONDS_LEFT - 60))
          done

          echo "⏰ Time is up! Killing SSHX if still running..."
          kill $SSHX_PID || echo "SSHX already stopped."
          wait $SSHX_PID || true
          set +x

      - name: Backup VPS data
        run: |
          echo "✅ Backing up VPS data..."
          BACKUP_DIR="/opt/vps-backup"
          sudo mkdir -p "$BACKUP_DIR/data"

          echo "📂 Copying Tailscale state..."
          if [ -f /var/lib/tailscale/tailscaled.state ]; then
            sudo cp /var/lib/tailscale/tailscaled.state "$BACKUP_DIR/data/"
          fi

          echo "📂 Preparing directories to backup: /etc /var /home/HTNodes /opt"
          TOTAL_SIZE=$(du -sb /etc /var /home/HTNodes /opt \
            --exclude=/var/log \
            --exclude=/var/cache \
            --exclude=/var/lib/apt/lists \
            --exclude=/var/lib/docker 2>/dev/null | awk '{sum+=$1} END {print sum}')
          echo "📦 Total size after exclusions: $TOTAL_SIZE bytes"

          echo "🔄 Creating compressed backup with progress bar..."
          sudo tar --exclude='/var/log' \
                   --exclude='/var/cache' \
                   --exclude='/var/lib/apt/lists' \
                   --exclude='/var/lib/docker' \
                   -cf - /etc /var /home/HTNodes /opt | pv -s $TOTAL_SIZE | pigz -9 > backup.tar.gz

          echo "✅ Backup complete!"

      - name: Upload VPS backup artifact
        uses: actions/upload-artifact@v4
        with:
          name: vps-backup
          path: backup.tar.gz
